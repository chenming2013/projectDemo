泛型：
	一.泛型简介：
	   1、泛型可以在编译的时候检查类型安全，并且所有的强制转换都是自动和隐式的。
	   2、泛型的原理就是 “类型的参数化” ，即把类型看做参数，也就是说把所要操作的数据类型看做参数，就像方法的形式参数是运行时传递的值的占位符一样。
	   3、简单的说，类型变量扮演的角色就如同一个参数，他提供给编译器用来类型检查的信息。
	   4、泛型可以保证如果程序在编译时没有发出警告，那么运行时就不会产生ClassCastException。
	   【注意：类型变量是在运行时才代入的】
	     泛型总结：所谓泛型，即通过参数化类型来实现在同一份代码上操作多种数据类型，泛型编程是一种编程范式，他利用 “参数化类型” 将类型抽象化，从而实现更为灵活的重用。
	     
	     
	二.泛型类的注意点：
	   1、对象实例化的时候如果不指定泛型，那么就默认是Object类。
	   2、泛型不同的引用不能相互赋值。
	   3、加入集合中的对象类型必须与指定的泛型类型一致。
	   4、静态方法中不能使用类的泛型。
	   5、不能在catch中使用泛型。
	   6、从泛型类型派生子类，泛型类型需具体化。
	   7、不能声明泛型数组。
	   8、泛型不能与static一起用
	   
	   
	三.泛型的使用：
	   1、泛型的类型可以是泛型类。【观察：GenericDemo2.java】
	   2、泛型类可以同时设置多个类型参数 【观察：GenericDemo3.java】			
	   3、泛型类可以继承泛型类。  【观察：GenericDemo4.java】
	   4、泛型类可以实现泛型接口。  【观察：GenericDemo5.java】
	   
	   
	四.限制泛型可用类型：
	   1、在定义泛型类别时，默认在实例化泛型类的时候可以使用任何类型，但是如果想要限制使用泛型时，只能用某个特定类型或者是其子类才能实例化该类型时，
	            可以在定义类型时，使用extends关键字指定这个类型必须是继承某个类，或者实现某个接口。
	   2、当没有指定泛型继承的类型或接口时，默认使用extends Object，所以默认情况下任何类型都可以作为参数传入。
	 
	   
	    【注意：Dog是Animal的子类，但是不能说Generic<Dog>是Generic<Animal>的子类，实际上这两者并没有什么关系。那么想让一个泛型类引用Generic<Animal>应该怎么做呢？】   
	五.泛型通配符：“？”
	   1、“？”代表任意一个类型。
	   2、？extends T 表示T是上限；   ？super T 表示T是下限。
	   【观察：GenericDemo6.java】
	   
	   
	六.泛型方法：
	   1、不仅类可以声明泛型类，类中的方法也可以声明仅用于自身的泛型，这种方法叫做泛型方法。
	            定义格式为：访问修饰符 <泛型列表> 返回值类型  方法名（参数列表）{} 
       2、在泛型列表中声明的泛型，可用于该方法的返回值类型声明、参数类型声明和方法代码中的局部变量的类型声明。
       3、类中其他方法不能使用当前方法声明的泛型。
       4、泛型方法能够重载。
             【注意：是否拥有泛型方法，与其所在的类是否泛型没有关系。要定义泛型方法，只需将泛型参数列表置于返回值前。】
             什么时候使用泛型方法，而不是泛型类呢？
                    当添加类型约束只作用于一个方法的多个类型之间，而不是涉及到类中的其他方法时。
                    【如果施加类型约束的方法为静态方法，那么就只能将其定义为泛型类，因为静态方法在类加载的时候就会被加载，而泛型类型是在实例化的时候才确定的，所以就相当于静态的不能引用非静态的】	     
	     
	     
	七.区别：
	   1、“? extends 类”    与         “? super 类” 的区别
	      “? extends 类”: 泛型上限，可以在声明上和方法参数上使用    
	      				   使用泛型上限只能读取数据，不能添加数据。
	      				   解释：泛型上限，也就是说可以有这个泛型类及其子类，向其添加数据，但是不知道向哪一个具体的泛型子类中添加，因此为了确保安全，就不允许添加数据。
	      “? super 类”  ：泛型下限，只能在方法参数上使用。
	      				   使用泛型下限只能添加数据，不能读取数据。
	      				   解释：泛型下限，也就是说可以有这个泛型类及其父类，向其添加数据，由于 “父类的引用可以引用子类的实例” ，所以能够向其添加数据。
	      				             但是由于父类不确定，读取的时候要向上转型，但是并不确定转型为哪一个确定的父类，所以为了确保安全，就不允许读取数据。
	      【观察：GenericDemo7_4.java】
	      
	      
	      【观察一个小程序：EmployeeDemo.java/Employee.java/MyDate.java】
	         
	       
	     
	     
	     
	     
	     