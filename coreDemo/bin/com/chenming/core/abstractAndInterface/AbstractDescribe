一、abstract：抽象--->抽出相象的部分
        抽象方法：指的是没有方法体的方法，同时还要被abstract关键字修饰
        抽象类：含有抽象方法的类，同时还要用abstract关键字修饰。
  
        定义抽象类，抽象方法 【观察 AbstractTest1.java】
        
        抽象类的使用原则：
        1、抽象类必须有子类。
        2、抽象类的子类要么继续使用abstract修饰从而变成抽象类，要么重写抽象类之中的全部抽象方法。【注意：是全部的抽象方法都要重写】
                         但是从开发的角度看，你既然将一个类定义为抽象类，即：将相象的部分单独定义成一个类，肯定是希望有子类继承的，所以抽象类一定要有子类继承
        3、抽象类不能实例化，抽象类的对象实例化必须依靠子类完成，采用向上转型的方式处理。（抽象类有构造器）
        
        正确使用抽象类：【观察 AbstractTest2.java】
        
        抽象类的相关限制：
        1、由于抽象类里面也会有属性，所以一定有构造方法，目的是为属性初始化。 但是不能直接通过构造方法实例化对象。
        2、抽象类不能用final修饰。因为final修饰的类不能被继承，而抽象类却是要子类继承，故而abstract与final不能连用。
        3、外部抽象类不允许使用static声明，而内部的抽象类允许使用static声明。
                         使用static声明的内部抽象类就相当于一个外部抽象类，继承的时候使用“外部类.内部类”的形式表示类名称。【观察：AbstractTest3.java】【使用static声明的内部类是独立的，不受AL类限制】
                         若是没有static声明，就是一个真正的内部类，是要受到所在类的限制。
                         【观察：AbstractTest4.java】【这里的AC类中的AV类数没有static声明，所以是真正的内部类，并不是外部类，故而要受到AC类的限制，所以不能使用AC.AV的类形式被CC类继承。而是要使用BC类的方式才能继承。】
        4、任何情况下，如果要执行类中的static方法的时候，都可以在没有对象的时候直接调用，对于抽象类也是一样，此时可以没有子类。【观察：AbstractTest5.java】
        5、抽象方法必须为public或者protected（因为如果为private，则不能被子类继承，子类便无法实现该方法），缺省情况下默认为public。
        6、接口中不能含有静态代码块以及静态方法，而抽象类可以有静态代码块和静态方法；