一、多态：
        多态定义：多态是指同一操作作用于某一类对象，可以有不同的解释，产生不同的执行结果。
        
        多态存在的三个必要条件：
        1、需要存在继承和实现关系（接口）
        2、同样的方法调用而执行不同操作、运行不同的代码（重写操作）
        3、在运行时，父类或者接口的引用变量可以引用子类的对象。
        
        多态性严格来讲有两种描述形式：
        1、方法的多态性：
                      （1）方法的重载： 有相同的方法名，不同的参数列表，与返回值类型无关。【同一个方法名称，会根据传入参数的类型及个数的不同，执行不同的方法体】
                             （注意，如果一个print方法里的参数为Object obj，另一个print方法参数为Person P,那么也算是重载。【尽管Person类是Object类的子类】
                                观察DuoTaiTest1.java）
                      （2）方法的重写： 有相同的方法名，相同的参数列表。【同一个方法，会根据子类的不同，实现不同的功能】
                      
        2、对象的多态性：指的是发生在继承关系中，子类与父类之间的转换关系。
                      （1）向上转型（自动完成）：父类的引用变量可以引用子类实例对象  即：父类   父类引用 = 子类实例。
                               【注意】 向上转型总是安全的，但是可能丢失子类的方法：如果子类中有自己特有的方法，而不是重写父类的方法，当发生向上转型的时候，就会丢失子类特有的方法（即：不能调用子类特有的方法）
                                观察：DuoTaiTest2.java 在这里发生了向上转型（HH h = new I() ）, 因为print方法被重写了，所以在调用的时候，会调用子类重写的print方法，但是因为父类里面没有fun方法，所以父类无法调用fun方法，会直接报错。                  
                      （2）向下转型（强制转换）：子类 子类对象 = （子类）父类实例 。
                      
           instanceof运算符用来在运行时通过返回一个布尔值来指出对象是否是特定类或者它的子类的一个实例。
                         语法：Boolean b = object instanceof class
                         如果object是class或其子类的一个实例，则instanceof运算符返回true，如果不是或者object为null，则返回false
           
           在对对象做向下转型之前，没有其他有关对象类型信息的时候，务必使用instanceof来判断一下，以避免抛出ClassCastException
           
                         向上转型特点：能够实现参数的统一，还可以调用子类重写后的方法，即：同一个方法针对于不同的子类有不同的实现。
                         向下转型特点：指的是能够调用该子类特有的方法。
                         【注意】在向下转型之前，一定要首先发生向上转型，建立对象之间的关系后才可以进行。观察 DuoTaiTest3.java 
                         
                         静态绑定：在程序执行之前已经被绑定，针对java简单的可以理解为程序编译期的绑定（静态绑定），
                   java当中的方法是final、static、private和构造方法都是前期绑定的。      
                         动态绑定：根据变量实际引用的对象类型来决定调用哪个方法。
                   1、父类的引用可以引用子类的实例对象。
                   2、如果父类的引用引用了子类的实力，调用方法时，如果方法构成了重写，那么调用子类的方法，否则调用父类的方法。【观察：DuoTaiTest4.java  DuoTaiTest5.java  DuoTaiTest6.java】
    
    注意：方法覆盖，变量隐藏（变量只是隐藏，并不是被覆盖了观察  DuoTaiTest.java）
    
    